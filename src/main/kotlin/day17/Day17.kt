package day17


fun main() {
    part1()
}

fun part1() {
    val chamber = Chamber(Movement(testInput.toList()))
    var rockIndex = 0
    repeat(2022) {
        chamber.addRock(rocks[rockIndex % rocks.size])
        rockIndex += 1
    }
    println(chamber.linesOfRocks())
}


class Chamber(private val movement: Movement) {
    private var data: MutableList<MutableList<Char>> = MutableList(1) { MutableList(7) { '.' } }
    private var shrinkedBy: Long = 0L

    fun addRock(rock: List<String>) {
        prepareCave(rock)
        move(rock)
        shrink()
    }

    private fun shrink() {
        while (data.size > 2000) {
            data = data.drop(500).toMutableList()
            shrinkedBy += 500
        }
    }

    override fun toString(): String {
        return data.reversed().joinToString("\n")
    }

    fun linesOfRocks(): Long {
        return shrinkedBy + data.indexOfLast { it.contains('#') } + 1L
    }

    fun bottomRepeats(): Boolean {
        val lastLineWithRock = data.findLast { it.contains('#') }
        return lastLineWithRock != null && data.size > 5 && lastLineWithRock[3] == '#'
    }

    private fun move(rock: List<String>) {
        var x = 2
        var y = data.indexOfLast { it.contains('#') } + 3 + rock.size

        var wasNotStopped = true
        while (wasNotStopped) {
            when (movement.getNext()) {
                '<' -> {
                    if (canMoveLeft(rock, x, y)) {
                        x -= 1
                    }
                }

                '>' -> if (canMoveRight(rock, x, y)) {
                    x += 1
                }
            }
            if (canFall(rock, x, y)) {
                y -= 1
            } else {
                place(rock, x, y)
                wasNotStopped = false
            }
        }
    }

    private fun canMoveLeft(rock: List<String>, x: Int, y: Int): Boolean {
        if (x == 0) {
            return false
        }
        return !collides(rock, x - 1, y)
    }

    private fun canMoveRight(rock: List<String>, x: Int, y: Int): Boolean {
        val rockWidth = rock.first().length
        val caveWidth = 7
        if (x == caveWidth - rockWidth) {
            return false
        }
        return !collides(rock, x + 1, y)
    }

    private fun canFall(rock: List<String>, x: Int, y: Int): Boolean {
        val rockHeight = rock.size
        if (y == rockHeight - 1) {
            return false
        }
        return !collides(rock, x, y - 1)
    }

    private fun collides(rock: List<String>, x: Int, y: Int): Boolean {
        val rockWidth = rock.first().length
        val rockHeight = rock.size
        (y downTo (y - (rockHeight - 1))).forEachIndexed { rockY, worldY ->
            (x until (x + rockWidth)).forEachIndexed { rockX, worldX ->
                if (rock[rockY][rockX] == '#' && data[worldY][worldX] == '#') {
                    return true
                }
            }
        }
        return false
    }

    private fun place(rock: List<String>, x: Int, y: Int) {
        val rockWidth = rock.first().length
        val rockHeight = rock.size
        (y downTo (y - (rockHeight - 1))).forEachIndexed { rockY, worldY ->
            (x until (x + rockWidth)).forEachIndexed { rockX, worldX ->
                if (rock[rockY][rockX] == '#') {
                    data[worldY][worldX] = rock[rockY][rockX]
                }
            }
        }
    }

    private fun prepareCave(rock: List<String>) {
        val emptySpaceOnTop = if (data.size == 1) {
            1
        } else {
            val lastLineWithRock = data.indexOfLast { it.contains('#') }
            data.size - lastLineWithRock - 1
        }
        val height = rock.size
        val spaceNeeded = height + 3
        pushLines(spaceNeeded - emptySpaceOnTop)
    }

    private fun pushLines(numberOfLines: Int) {
        repeat(numberOfLines) {
            data.add(MutableList(7) { '.' })
        }
    }
}

data class Movement(private val moves: List<Char>) {
    private var currentIndex = 0

    fun getNext(): Char {
        return moves[currentIndex].also {
            currentIndex += 1

            if (currentIndex >= moves.size) {
                currentIndex = 0
            }
        }
    }

    fun atStart(): Boolean = currentIndex == 0

    fun at(i: Int): Boolean = currentIndex == i
}

private val rocks = """####

.#.
###
.#.

..#
..#
###

#
#
#
#

##
##""".split("\n\n").map { it.lines() }
private const val testInput = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"

private const val realInput =
    ">>><>><<<><<<>><>><>><>>><><<<><<<<><>>>><>>>><<<<>>><<<<>><<<<>>><<<>>><<<>><<>>><>>><<>><<<<>>>><<<><<<><>>><<>>>><<<>>><<><<<>>>><<<><>><<<>>>><<>>>><<<<>><<<><<<<><>>>><<>>>><<>>>><<<<><<<<>>><><<>>><>>><<>>><<<<>>>><<<>><<<<>>>><<><<>>>><<<>><<><<<>>>><<>>>><<<<>>>><<<><<>>><<<>><<<<>><<>>>><<<>>>><<>>>><<>>>><<<<>><>>>><<<<><<>>>><>><>>><<>>>><<<<>>><>><><<<><<>><<<><<>>><<<><<<><<<<><<<>>><><<<<>><<<>>><<><<<<>>><<<<>>>><<<>>><<<>>>><<><<<<>><><<>>>><<<><<>>><<>><<<<>><<<>><>><>><>>><<<>>>><>>>><<><<<>>><>>>><<<>>>><>><<>><>>>><<<>>><<><<><<<<>>><<>><>>><<<>>><><>><<<<><<<><<>><>>><><<>>><<<>>><<>><<<<>>>><<<>><>>><<<<><<>>>><>>>><<>>><<<>>>><>>><><<<>>>><><<<<><<>>><<<<>>><><<>>>><>><<<><<>><<><<<<><<<<>>>><<<<><>>>><<<>>>><<<<>><>>><<<>><<<><<<<>>><>><<<<>><<<>>>><<<>><>><<>><>><<<>>>><>>>><<>>><<><<<>><<<<><<>>><>>>><<>>>><>>>><<<<>>><<>>><<<><<<>><>>>><<>>><<<<>>>><<<<>>>><>>><<>><<<<>><>>><<<>><>>><>>>><<>><<<><<<>>><<<><<<>>>><>><<<>><>>>><<<<>>><<<<>>>><<<><>>>><>><<<<>>>><<<<><<>><<><>><<>><><<<>>>><<<<><<<<>>><<<><>><>><<<>>>><<>><<><>>>><<<<>><<><<<<>>><<<><>>>><<>>><<<<>>>><>>><<<><><<<><<<><>><<<<>><<<<>>>><<<>><<<<>>><<><>>>><<<>>><><<<>>>><>>><<>><<>>>><<<>><<<>><<<>><<<<>>><<<><>><<<>>>><<>>><>>><<<<>><<>>>><<<<>>>><<>>><<<>>><><><<>>><>>><<>>>><>><<<<>>><>>>><<<<>>>><>><<<>>><<<<>>>><<<<>>>><<<<><<<>><<<>><<<><<<<>>><<<>><>>>><>>><<<<>>><<<<>>><<>><<>><><<>><<<>><<>>><<<>>><<<>>><<<>>>><>>><<<<>>><>>><<<>>>><<<>>>><<>>><<<<>>><><<><>><<<<><<>><<>>>><<<>><<<>>><<<>><<<<>><<>>>><<>><<<>>>><><<<>>>><>>>><<><<<>>>><><<>>><<<<>>>><>>><><<<><<<>>>><<<>>><<<>>>><>>>><>>><>>>><<<>>><<<>>><><<<<>><>>>><<<>>><<<>>><<<<>><><<>>><<<>>>><<<<>>><>>><<<<>>><>><>>><<<><<<<>>>><<<>><<<<><<<<>><<>>><<<>>>><<<<>><<>><>><<<<>><<>>><<>>>><<<<>><<<>>>><><<>>>><<>>>><<>><<<>>>><<<>>>><>><<>>>><<<>>>><<>>><>><<><><>>><<><<>>><<<<>>>><<>>>><<>>>><<>>><<<<>><<>>><<<<><<<<>><<<<><<>><><<<<>>>><<<<>><<>>>><<>><<>>>><<>>><>>><<><<<><<<<>>>><<<<>><>>><<<<>>><<<>>>><<>>><<><<><>><<<>><<>><<<><<>>>><<<>>>><<<<>>>><<>><<<>>><<>>>><<<><<<<>>>><<>>><>>><<<<>>>><<<>><<><>>><<<<>><<>><>>>><<<>>><><<<>><><<>><<<>>>><<>><<><<>><<<<>>>><<>><>>>><<>><>><<<>>><<><<<>>><>>><<><<<<>><<<<>>>><<>><<<<>>>><>>>><<<>>><><>>>><<<>>><>>><<>>><<<>><<<<>><<<>>><>>><><<<<>>>><<<><<>>>><<><><<>><<>>><<>>>><>><>>><<<<><<<>>><<<<>>><<<<><>>><<<<><<<>>>><<>>><<<>>>><<<<>>><<<>>>><<>>><<<<>>>><>><<<>><<<<><>>>><>>>><>>><<<<>>>><>><<<<><>><<<>><<>>><<>>>><<<<>>><<<>>><<<>><<<>><<<<>><<<<><><<<><<><<<>><<<><><>><<>><><><<<<>>><<>>><<<<>>><>><<<<>><<<>><<>>><<<>>><>>><<<>><<>>>><<<<>>><<<>><<<><<<><<><<<>><>><<<<>>><<<<>><<>><><<<>><<<>>>><<>>>><<<><<<<>>>><<<<><<<><<<>>><<<<><<>>><><<<>>><<<>>><>>><>><>>>><<<<>>>><<>>><><<<>>>><<<>>>><<<>>>><>><<>><<<<>><<<<>>><<<<>>>><<><<<>>>><>>><<<>><<>>><<<<>>>><<<><<<<>><<<<><>><<<<>><>>><<<>>>><<<>>><<>>><<>>>><<>>><><<<>>>><<><<<>>>><<>><<<<><<<><<<><<>>>><><<<<><><>><<<>>>><<<<>><<<>><>>><<<<>>><<<<><<>>><<>>><<<<>><<<><>>><>><<<><>>><<<>>>><<<<>>><<<<><<<<>>><>>>><<<>><<<<><<<<>><<<<><<<<>><<<>>><<><<><>>>><<>>><<<><<<<><<>>>><<<<>>><<>><><<<>>>><<>><<<>>>><<><<>><<<<>>><><<<>>>><<<>><<<>><<>>>><<<>>>><<><<<<><>>><<>>><>><<>><<<<>>><>><<>>>><<<>><<<<><<<<><<>><<<<><<>>><<<>>><<<<><<<>><<<<><>><<<<>>><<<<>><<<<><<><><<<><>><><<<<>>><>>>><<<><<<<>><<>><<<<>>><<<>>><<<>><>><<<<><>><><<<>>><<><<<<>>>><>><><<>>><>><<<><<<<>>>><<>>><<<>><<<<>>><<>>><>>>><<>>>><>>><<<><>>>><<>>><><>>><<<><<<<>>>><<<<>><<<><<<>>>><<><<>>>><>><>>><<<>>>><<<<>><<<<>><<><<<>>><<><<<<>>><<<<><<<<><<<>>><<<><>>>><>>><<>>><<>>><<<<><<<<>><<<<>>>><<>>><<><<<<>>><<<<><<<<>>><<>><<<>>><<<<>><<>><<<<><>><<>>><>>><<>>><<<<>><<<<><><<<>><<>><<>>>><<>>><>>>><<<<>>>><<<<>>>><<<<><>><<<<><><<<<>>>><<<><<<<><<<<>>>><<<>><<>><>>><<<>>><>>>><<<>>>><<<<>><>><<<>><<><><<<><<<<>>><<<<><<<><>><>>><<<<>><>><<<>><<<<><<>>><<<>>><<>>>><>><><>><><<<>>>><>>><<><<<<><>>>><<><<>><>><<<>>><>>><<<<><<<>>><<<>>>><<<>>><<<>><<>>><<>>>><>><<<<>><<<<><>><<>>><<>>><<><<>>><<<<>>>><<<>>><<>><<<><<<<>><<<>><<><<<<><>>><<<>><<<<>>>><<<><<<>><<<><<<<>><<>>>><<<<>>>><<<><<<>>>><<<><<<><><<<<>>>><<<>>>><<<>>><<<><<<>><<<<>>><>>><<<<>><<<>>><<<<>>><<<<>><<><<<<><<>><<>>><<>>><<><<<<>><>>><<<>><<>>>><<<>><>>>><<<>>><>>><<><<<<>><<<<>><<<<>>><<<<>>><<<>><>>><<<<>>><<<><<<>>>><<<><<<<>><<<<>>><<<>>>><<<>>><<><><>>>><<<>><<<>>>><>>>><<<<>>>><><<<<>>><>><<<<>>><<<><>>><<<>>><<<<><<<>>><<<<>>><>>><>><<<<><<><<<<>>><>><<>>>><<>>><><>>>><<<<>>>><><<>>>><<>>>><>>>><<>>>><>><>>><<<<>>><<>><<<<>>><<<>><<<<><<>><<><<><<<><<>>><<<<>><<><<<>><<<>>>><<>>>><<><<<>>><<>><>>><<<><<<>>><<<<>>>><>>>><<><<<<>>>><<>>><>><>>><<<>>>><<<><<<<><<<<><<>><<<<>><<<>><<<>><>><>><<>><<>>>><>>>><><<<<>>><<<><<>><<<<><<>>>><<<<><>>><<<<>>>><>>><<<>><<>><><>><>>><<<>><<>>><>><>>><<>>><<<<>>>><<<<><<<<>>><<<<><<>><<<<>><<<<><<<<>>><>>>><<><>><><<<><<<>>><<<><<<>>>><<>><>><>>><<>>>><>>>><<>>>><<>><>><<<>><<>><<>><<<><<>><><><<<>><<>><<<<><>><<>>>><<<<><<<>><>>>><>><<<><<<>>>><<>>><>>><<<<>>>><>><<>><<<<>>>><<<>>><<<<>><>>><<<>>>><<<><<><><<<<><<<>>>><<<>><>><<<><><<>>>><<<<><<>>><>><>>><<<>><<>>>><<>>><<><<>>>><<>>><<<<><>>><<<>>><><>><<>>>><<<<>>><>>><><<<<><<><<<><>>>><>><<<><<>><><<>><<>>>><>>>><<>>>><>>>><<<><<<<>><<<<>><<>>><>><<<<>>><<<<><<<>><><<<<><<<<><<<<>><>>><>>>><<<<>><<<<>>>><<<<><><<>><<<>><>>><<>>><<>>>><<><><<<<>>><<<>>>><<<<><<>>>><<<<>><>>><>>>><<<>><>>>><<<<>>>><><<><<<><<<<>>>><<>><<<>>><<<<>><>>>><<<>>><<<>>>><><<<<>><<>><<<><>>><><>>>><><<>>>><<<<><<>>>><>>><<>>><<<<>>>><<<>>>><<<<>>><<<<>><<<<>>><<><><<>>>><>>>><><<>>><>>><<><<><<><<<>>><<<><<><<<>>><>>><<<>>><<<<>><<<<>><<>>><<<<>>><<<>><>><>><<><<<><<>>><<><<<><<>><>>><<<>>><>>><>>><<>>>><<<><<>>><><<<>>><>>><>><>>><>>>><<><<<><<<>>>><<<<>>>><<<>>>><<>>>><<<><>><<<<>>>><<<<><>>><><<<<><>>>><>><<<>>>><>>>><<>>><<<<>><>>>><<>>><<>>><<>>><<<>>>><>><<>>>><<<<><<<<>>><<<<>>>><<<<>>><>>><<<<><<>><>>><><<<>>>><>>><<<<>><<<><<<<><<<>>>><>>>><>>>><<<<><<>>>><<<<>><<<<>>>><>><<><<>>>><<><<<<>>><<<>>>><<<<>><>>><<<><<<>><<<><<<>>>><<>>>><>>><<<>>>><<>><<>>>><<<<>><>>>><>>><<>>><<<>>><<>>><>><<>><<>><<<>><<<<><<<>>>><>><><<<<>>><<<<>>><<>>>><><<<>>>><<>>>><><<<<><<<>><<<>>>><<<<><<<<>><<>>>><<<<>>>><>>><<<<>><>>><<><<<<>>><<<>>><>>><<<>>><><>><<<<>>><>>>><<<>><<>>>><<>>>><>>><<<><<<>>><<<<>>>><<<>>><><<<<>>>><><<<>><>><<<><<><><<<>><<<>><<<<>><<>><><>><<<>><<<>>><>><<<<>>><<<>>>><<>>>><<>>>><<<>><<<>>>><<<<><<<>>><>>>><>><>><<><<><>>>><>><<<<>><<<>>><>>>><<>>><<<>><<<<>><<<>><<<<>><<>>><<<><>><<<>><<<><<<<>>>><<>><<>>>><>>><<><<>>>><<<<><<>>><<><<<<>>><<<<>>><<<>>>><<<<><<><<<<>><<<><<<<>>>><<>><>><<<<>>><<>>>><>>>><<<<><<><<<<>>><>>>><<<><<>>><<<<><<<>>><<<>><<<<>><>>><>><<>>>><<<<>>>><>>><<><<<>><<>>><>><<<<>>><<<>>>><<>><<<>>>><<<<>><<<>>>><>><><<<<>>><<<>>>><<>>>><<<<>><<<<>>>><><<<<>><>>><<<<><<<>>><>>><<>>><><<><<>><<><<>>>><<<>>>><<<<>><<<<>>><>>><<<><<>>>><<><<>>><<<<><<>><<<<>>><<<<>><<<<>>>><>>>><><<<<>><>><>>>><<>>><<<<>>><<<><<<<>>><><<>>>><<>><<<>>>><<<><>>><><<<<><<<><<<>><<>>>><<>>><<<<>><><<<>><<>>><>>>><<<>><<>>><<>>><<<<>>>><<<<>>>><<>>>><<<<>><<<>>>><<><<><><<<>>><<<<>>><>>>><<>><<<>><<<<><<>><<>><<>><>>>><<<<>>><<<<>>><>>><>>>><>>><>>><<<><<<>>><<<>><>><<>>>><<<>>><<<>><<<>><<>>><<<>>>><<<><<>>><<><<<>>><<<>>>><>>><<<>><<><<<<>><<<>><<<<><<>><<<<>>>><>>>><<<<><<<<>>>><<<>><<<<><<<>>>><<<><<<<>>><<<><>>><<>>>><>>>><<><<>><<>>><<<<>>><<<<>>>><<<>>>><<<<>>>><>><<<>>><><<>><>>>><><<><<<<>>><<>>>><>><<<>>><><<<><<>><<<>>>><<<<>>>><<<<>>><<<<><<<<>><>>>><<<<>><<<<>><><<<<>><<<>><<>>>><>>><<<>>><>>>><<<>><<<>>><<<>><<<<>>><<<<><<>><<>>>><<<>><>>>><<<<>>><<<>><<<>>><<<<>>><><>><<><>>><><><>><<>>><<<><<<<>>>><<<>>>><<<>>><<>><<>>>><<<<><<<<>>>><<<<>>><<<>><<<<>>><<<>>><>>>><<><>>><<<<>>>><<<>>>><<<>><>><>>><<<<><<<>>>><<<<>>>><>><<<<><<<><<<><<>>><<>><<<><<>><<>>><<<>><<<<><<>>><<<><>>><>>><<<>>><<>>>><<<<><<<<>><<>>>><<<<>><<<>>>><<<>>><<><<><<><<<>><<<<>><>>><><<<<><<<>>>><<><<><<<>><<<<>>><<>><<<<>><<<<><<<>>>><<>><<><<<<>><<<>>>><<<>>><>><>><><>>>><<<<>>><>>><<<<>><<<>>>><<<>>><<<>>><<<><<<>>>><>>>><<<<>>>><>>>><>><<<<><<<<>>>><<<<>><<<<>><<<<><<<>><<>><<><<<<>>><<<>><<>>>><<>>><>>>><<><<<<>><<<>>>><<>>>><>>>><<><<>><>>>><<>><<<<>>>><>>>><>>>><><<>><<<<>>>><><>>>><<<>><<<<>><<<>>><>>>><<<><<<><<>>>><<<>><<<>>>><<<>>><>>>><><<>>>><<<>><<<>>><<>>><>>><<<>>><<<>>><<<><<><<<>>>><<<>><<<>>><<<<>>><<<>>><<<><><<<>><>>><><<<<>><<<<>>>><<<>>>><>>>><<<<>><><<<<>>>><>>><<<<>><<<<>>><<<<>>><<><<<><>>><<<>>>><<<>><<>><<><<<><<>>>><<<>>>><<<>>><<<><<<>>>><<<>><<<<>>>><>><<<<><<<<><>>><>>><<><<><<>>>><<<><>>><><<<<><<<>><<<>><<<>>><<>>><<<<>>><<>>><>>><<<>>><>>>><<><>>><<<>>>><<<>>>><>>><>>><>><>>><<<<>>>><<<><<<>><><<>><<<><<<<><<<>>>><<>>><>>>><<<<>><>>><<<>>>><<>>><<<>><<<><>><<<>>><<>>>><<<<>>>><<><<>><<><<<><<>>><><<<<>><<>>>><>>>><>>>><<><>><<<>>><<<><<<>>>><<<<><<>>><<<<><>>>><<<><<<>><<><<<<>><<><<><<>>>><<<<>>>><<<<><<>>>><>>>><<<<>>>><<>><<><<<>>>><><<<<>>>><<>>><<<><<<<>>><<<<><<>>><>>><<><<<<>>><<<>>><<<>>><<<<>>><<>>>><<<><<<>>>><<>><>>><<>>>><<<>><<<><<<<>><<>><<<<>>><<<<><<<<><<<>>><>><<<<>><<>><>><>><<<>>><<>><<<<>>><>>>><>>>><<>><<<<><<<<>>>><><<<><<<><<>><<<<>><<<<>>>><><<>><<<<>><<<<>><<<<>>>><>>><<<<>><<<>>><<<>><<<<><<<<><<<<>><><<<<>>><>>><<<<>><<>>><<>>>><<<>><<>><<<<>><>><>><<<<>>><<<>><<>>>><<<>><<<<>>><<><><<<<><<<>>>><<<>>>><<<<><<>>><><>><<<<>>><<<<>>><<>><<<<>><>>>><<<>><>>>><>><<<<>>>><<<<><>><<<<>><<<>><><<<>>>><<><<<<>><<>>>><<<><<<<>><<<>>><<><<><<<>>>><<<><<>><<>>>><<<>><<<>>><<<>>><<<>>><<<<><><<<><>><<<<><<<<>>>><<>>><>>>><<<><><<<><<<>>><<<>><><<<>>><>>>><<<>>><>>>><><<>><><<<<><<>>>><>><>>>><<>><><<<>><<>>>><><<><<<<>>>><<<<>>>><<<>><<<>><<>>>><<<>>>><<<>>><><<>>><<<<><><<<<>>>><<>><<>>>><>>><<><<>>>><>>><<>>>><>><>>><>><<<>>>><>>>><<><<<<>>><>>>><<<><<>>><<<>>>><<<>><<<<>><<>>><<<><>>>><<<<>><<>>><<>><><<><<<<><<<>>><>><>>><<<<><<<<>>>><<<>>><<<>><<<<>><<<>>>><>>>><<<<>>><><<>><<<>>>><<<<><<>>><<>><<>>><<<<>>><>>><<<<>>><<<<>>><<<<>><<>>>><<<<><>>><<<<>>>><<<<>>>><<<<>>><<<>><<<><<<>>>><<>>>><<<><<<<>>><<<<>>>><>><<<><>><<>>><<<><<>>>><>>><<<<>>>><<>><<><<<<><<<<>>><<<<>>>><<>>>><<<<>>><<<<>"